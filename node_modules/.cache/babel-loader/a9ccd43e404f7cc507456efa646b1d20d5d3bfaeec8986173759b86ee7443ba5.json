{"ast":null,"code":"/**\n * Assert that the statement is true, otherwise invoke the error.\n * @param statement\n * @param error The message which is passed into an Error\n */\nexport function assert(statement, error) {\n  if (!statement) {\n    throw new Error(error);\n  }\n}\n/**\n * Make sure that the given value is within the range\n */\nexport function assertRange(value, gte, lte = Infinity) {\n  if (!(gte <= value && value <= lte)) {\n    throw new RangeError(`Value must be within [${gte}, ${lte}], got: ${value}`);\n  }\n}\n/**\n * Make sure that the given value is within the range\n */\nexport function assertContextRunning(context) {\n  // add a warning if the context is not started\n  if (!context.isOffline && context.state !== \"running\") {\n    warn(\"The AudioContext is \\\"suspended\\\". Invoke Tone.start() from a user action to start the audio.\");\n  }\n}\n/**\n * The default logger is the console\n */\nlet defaultLogger = console;\n/**\n * Set the logging interface\n */\nexport function setLogger(logger) {\n  defaultLogger = logger;\n}\n/**\n * Log anything\n */\nexport function log(...args) {\n  defaultLogger.log(...args);\n}\n/**\n * Warn anything\n */\nexport function warn(...args) {\n  defaultLogger.warn(...args);\n}","map":{"version":3,"names":["assert","statement","error","Error","assertRange","value","gte","lte","Infinity","RangeError","assertContextRunning","context","isOffline","state","warn","defaultLogger","console","setLogger","logger","log","args"],"sources":["/home/declan/node_modules/tone/Tone/core/util/Debug.ts"],"sourcesContent":["/**\n * Assert that the statement is true, otherwise invoke the error.\n * @param statement\n * @param error The message which is passed into an Error\n */\nexport function assert(statement: boolean, error: string): void {\n\tif (!statement) {\n\t\tthrow new Error(error);\n\t}\n}\n\n/**\n * Make sure that the given value is within the range\n */\nexport function assertRange(value: number, gte: number, lte = Infinity): void {\n\tif (!(gte <= value && value <= lte)) {\n\t\tthrow new RangeError(`Value must be within [${gte}, ${lte}], got: ${value}`);\n\t}\n}\n\n/**\n * Make sure that the given value is within the range\n */\nexport function assertContextRunning(context: import(\"../context/BaseContext\").BaseContext): void {\n\t// add a warning if the context is not started\n\tif (!context.isOffline && context.state !== \"running\") {\n\t\twarn(\"The AudioContext is \\\"suspended\\\". Invoke Tone.start() from a user action to start the audio.\");\n\t}\n}\n\n/**\n * A basic logging interface\n */\ninterface Logger {\n\tlog: (args?: any[]) => void;\n\twarn: (args?: any[]) => void;\n}\n\n/**\n * The default logger is the console\n */\nlet defaultLogger: Logger = console;\n\n/**\n * Set the logging interface\n */\nexport function setLogger(logger: Logger): void {\n\tdefaultLogger = logger;\n}\n\n/**\n * Log anything\n */\nexport function log(...args: any[]): void {\n\tdefaultLogger.log(...args);\n}\n\n/**\n * Warn anything\n */\nexport function warn(...args: any[]): void {\n\tdefaultLogger.warn(...args);\n}\n"],"mappings":"AAAA;;;;;AAKA,OAAM,SAAUA,MAAMA,CAACC,SAAkB,EAAEC,KAAa;EACvD,IAAI,CAACD,SAAS,EAAE;IACf,MAAM,IAAIE,KAAK,CAACD,KAAK,CAAC;;AAExB;AAEA;;;AAGA,OAAM,SAAUE,WAAWA,CAACC,KAAa,EAAEC,GAAW,EAAEC,GAAG,GAAGC,QAAQ;EACrE,IAAI,EAAEF,GAAG,IAAID,KAAK,IAAIA,KAAK,IAAIE,GAAG,CAAC,EAAE;IACpC,MAAM,IAAIE,UAAU,CAAC,yBAAyBH,GAAG,KAAKC,GAAG,WAAWF,KAAK,EAAE,CAAC;;AAE9E;AAEA;;;AAGA,OAAM,SAAUK,oBAAoBA,CAACC,OAAqD;EACzF;EACA,IAAI,CAACA,OAAO,CAACC,SAAS,IAAID,OAAO,CAACE,KAAK,KAAK,SAAS,EAAE;IACtDC,IAAI,CAAC,+FAA+F,CAAC;;AAEvG;AAUA;;;AAGA,IAAIC,aAAa,GAAWC,OAAO;AAEnC;;;AAGA,OAAM,SAAUC,SAASA,CAACC,MAAc;EACvCH,aAAa,GAAGG,MAAM;AACvB;AAEA;;;AAGA,OAAM,SAAUC,GAAGA,CAAC,GAAGC,IAAW;EACjCL,aAAa,CAACI,GAAG,CAAC,GAAGC,IAAI,CAAC;AAC3B;AAEA;;;AAGA,OAAM,SAAUN,IAAIA,CAAC,GAAGM,IAAW;EAClCL,aAAa,CAACD,IAAI,CAAC,GAAGM,IAAI,CAAC;AAC5B"},"metadata":{},"sourceType":"module","externalDependencies":[]}